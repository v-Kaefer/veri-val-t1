import static org.junit.jupiter.api.Assertions.assertEquals;
import java.time.LocalDateTime;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

public class CalculadoraTarifaTest {

    @ParameterizedTest(name = "{0}")
    @CsvSource({
        // Caso de Teste, Cliente VIP, Entrada, Saída, Valor Esperado
        "'CT01', false, '2022-01-01T08:00', '2022-01-01T08:15', 0.0",
        "'CT02', false, '2022-01-01T08:00', '2022-01-01T08:16', 5.90",
        "'CT03', false, '2022-01-01T08:00', '2022-01-01T09:00', 5.90",
        "'CT04', false, '2022-01-01T08:00', '2022-01-01T09:01', 8.40",
        "'CT05', true, '2022-01-01T08:00', '2022-01-01T10:00', 6.70",
        "'CT06', false, '2022-01-01T23:00', '2022-01-02T09:00', 50.00",
        "'CT07', false, '2022-01-01T23:00', '2022-01-02T07:59', 5.90",
        "'CT08', false, '2022-01-01T08:00', '2022-01-03T09:00', 100.00",
        "'CT09', true, '2022-01-01T08:00', '2022-01-01T08:15', 0.0",
        "'CT10', true, '2022-01-01T23:00', '2022-01-03T09:00', 50.00"
    })
    void testCalculaValor(String casoTeste, boolean clienteVip, String entradaStr, String saidaStr, double valorEsperado) {
        LocalDateTime entrada = LocalDateTime.parse(entradaStr);
        LocalDateTime saida = LocalDateTime.parse(saidaStr);

        CalculadoraTarifa calculadora = new CalculadoraTarifa(entrada, saida, clienteVip);
        double valorCalculado = calculadora.calcular();

        assertEquals(valorEsperado, valorCalculado, 0.01, casoTeste + " falhou");
    }

    // Teste para casos inválidos
    @ParameterizedTest(name = "{0}")
    @CsvSource({
        "'CT11', false, '2022-01-01T10:00', '2022-01-01T08:00'"
    })
    void testEntradaSaidaInvalidas(String casoTeste, boolean clienteVip, String entradaStr, String saidaStr) {
        LocalDateTime entrada = LocalDateTime.parse(entradaStr);
        LocalDateTime saida = LocalDateTime.parse(saidaStr);

        CalculadoraTarifa calculadora = new CalculadoraTarifa(entrada, saida, clienteVip);

        try {
            calculadora.calcular();
        } catch (IllegalArgumentException e) {
            assertEquals("A data/hora de saída não pode ser antes da entrada.", e.getMessage(), casoTeste + " falhou");
        }
    }
}
